# -*- coding: utf-8 -*-
"""bi_portfolio_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hfTRUApGqb6Kmflr-6CrFrwNF4bb-TGZ
"""

!pip install plaid-python streamlit scikit-learn pandas matplotlib seaborn

import os
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime

assets_table = pd.DataFrame([
    {"Asset": "S&P 500",         "AV Symbol": "SPY",      "AV Type": "stock"},
    {"Asset": "Semiconductors",  "AV Symbol": "SOXX",     "AV Type": "stock"},
    {"Asset": "Uranium",         "AV Symbol": "URNM",     "AV Type": "stock"},
    {"Asset": "Bitcoin",         "AV Symbol": "BTC",      "AV Type": "crypto"},
    {"Asset": "Gold",            "AV Symbol": "GOLD",     "AV Type": "commodity"},   # FIXED
    {"Asset": "Copper",          "AV Symbol": "COPPER",   "AV Type": "commodity"},  # FIXED
    {"Asset": "Oil",             "AV Symbol": "WTI",      "AV Type": "commodity"},
])

def get_av_data(row):
    symbol = row['AV Symbol']
    asset_type = row['AV Type']
    asset = row['Asset']
    cache_file = f"{cache_dir}/{symbol}_{asset_type}.csv"
    if os.path.exists(cache_file):
        print(f"[Cache] {asset}")
        return pd.read_csv(cache_file, parse_dates=['date'], index_col='date')
    if not api_key:
        raise ValueError("No Alpha Vantage API key found in environment variable ALPHAVANTAGE_API_KEY.")
    if asset_type == "stock":
        params = {
            "function": "TIME_SERIES_DAILY",
            "symbol": symbol,
            "outputsize": "full",
            "apikey": api_key,
            "datatype": "json"
        }
        endpoint = "https://www.alphavantage.co/query"
    elif asset_type == "crypto":
        params = {
            "function": "DIGITAL_CURRENCY_DAILY",
            "symbol": symbol,
            "market": "USD",
            "apikey": api_key,
            "datatype": "json"
        }
        endpoint = "https://www.alphavantage.co/query"
    elif asset_type == "fx":
        params = {
            "function": "FX_DAILY",
            "from_symbol": symbol[:3],
            "to_symbol": symbol[3:],
            "outputsize": "full",
            "apikey": api_key,
            "datatype": "json"
        }
        endpoint = "https://www.alphavantage.co/query"
    elif asset_type == "commodity":
        params = {
            "function": symbol,  # 'GOLD', 'COPPER', 'WTI', etc.
            "interval": "monthly",
            "apikey": api_key,
            "datatype": "json"
        }
        endpoint = "https://www.alphavantage.co/query"
    else:
        print(f"Asset type not supported by Alpha Vantage free API: {asset_type}")
        return pd.DataFrame()
    print(f"[API] {asset} ({symbol}, {asset_type})...")
    r = requests.get(endpoint, params=params)
    data = r.json()
    time.sleep(12.1)
    if "Error Message" in data or "Note" in data or not data:
        print(f"{asset} API error: {data}")
        return pd.DataFrame()
    try:
        if asset_type == "stock":
            ts = data.get("Time Series (Daily)", {})
            if not ts:
                print(f"No stock/ETF data for {asset}. Response: {data}")
                return pd.DataFrame()
            df = pd.DataFrame.from_dict(ts, orient="index")
            df.index = pd.to_datetime(df.index)
            df = df.rename(columns={
                "1. open": "open",
                "2. high": "high",
                "3. low": "low",
                "4. close": "close",
                "5. volume": "volume"
            })
            for col in ["open", "high", "low", "close", "volume"]:
                if col not in df.columns: df[col] = np.nan
            df = df[["open", "high", "low", "close", "volume"]].astype(float)
        elif asset_type == "crypto":
            ts = data.get("Time Series (Digital Currency Daily)", {})
            if not ts:
                print(f"No crypto data for {asset}. Response: {data}")
                return pd.DataFrame()
            df = pd.DataFrame.from_dict(ts, orient="index")
            df.index = pd.to_datetime(df.index)
            df = df.rename(columns={
                "1a. open (USD)": "open",
                "2a. high (USD)": "high",
                "3a. low (USD)": "low",
                "4a. close (USD)": "close",
                "5. volume": "volume"
            })
            for col in ["open", "high", "low", "close", "volume"]:
                if col not in df.columns: df[col] = np.nan
            df = df[["open", "high", "low", "close", "volume"]].astype(float)
        elif asset_type == "fx":
            ts = data.get("Time Series FX (Daily)", {})
            if not ts:
                print(f"No FX data for {asset}. Response: {data}")
                return pd.DataFrame()
            df = pd.DataFrame.from_dict(ts, orient="index")
            df.index = pd.to_datetime(df.index)
            df = df.rename(columns={
                "1. open": "open",
                "2. high": "high",
                "3. low": "low",
                "4. close": "close"
            })
            for col in ["open", "high", "low", "close"]:
                if col not in df.columns: df[col] = np.nan
            df = df[["open", "high", "low", "close"]].astype(float)
        elif asset_type == "commodity":
            ts = data.get("data", [])
            if not ts:
                print(f"No commodity data for {asset}. Response: {data}")
                return pd.DataFrame()
            df = pd.DataFrame(ts)
            if "date" in df.columns:
                df['date'] = pd.to_datetime(df['date'])
                df = df.set_index('date')
            if "value" in df.columns:
                df = df.rename(columns={"value": "close"})
            if "close" in df.columns:
                df = df[["close"]].astype(float)
        else:
            print(f"Unknown asset type: {asset_type}")
            return pd.DataFrame()
        df.index.name = "date"
        df.to_csv(cache_file)
        print(f"[Saved] {asset} data to cache.")
        return df
    except Exception as e:
        print(f"Failed to parse {asset}: {e}")
        return pd.DataFrame()

for asset, df in asset_data.items():
    print(f"\n{'='*60}\n{asset}")
    if df.empty or len(df) < 2:
        print("No data loaded.")
        continue
    print(f"Shape: {df.shape}")
    print("Columns:", list(df.columns))
    print("Dtypes:\n", df.dtypes)
    print("\nHead:")
    print(df.head(2))
    print("\nTail:")
    print(df.tail(2))
    print("\nDate Range:")
    print(f"Start: {df.index.min().date()}, End: {df.index.max().date()}")
    print("\nMissing Values Per Column:")
    print(df.isnull().sum())
    print("\nDescriptive Stats:")
    print(df.describe().T)

import os
import streamlit as st
import pandas as pd
import numpy as np
import requests
import datetime
from dateutil.relativedelta import relativedelta

# ========== CONFIGURATION ==========
ASSETS = {
    "S&P 500": {"symbol": "SPY", "type": "stock"},
    "Semiconductors": {"symbol": "SOXX", "type": "stock"},
    "Uranium": {"symbol": "URNM", "type": "stock"},
    "Oil": {"symbol": "WTI", "type": "commodity"}
}
MACROS = {
    "CPI": {"function": "CPI"},
    "Unemployment": {"function": "UNEMPLOYMENT"},
    "10Y Treasury": {"function": "TREASURY_YIELD", "interval": "monthly", "maturity": "10year"}
}
AV_API_KEY = os.getenv("ALPHAVANTAGE_API_KEY") or st.text_input("Enter your Alpha Vantage API Key:", type="password")

st.set_page_config(page_title="Market KPI & Compliance Dashboard", layout="wide")
st.title("ðŸ“Š Automated KPI & Compliance Monitor for Markets")

# ========== DATA LOADING FUNCTIONS ==========
@st.cache_data(show_spinner="Fetching data...", ttl=3600)
def fetch_stock_daily(symbol):
    url = "https://www.alphavantage.co/query"
    params = dict(function="TIME_SERIES_DAILY", symbol=symbol, outputsize="full", apikey=AV_API_KEY)
    r = requests.get(url, params=params)
    data = r.json().get("Time Series (Daily)", {})
    if not data:
        return pd.DataFrame()
    df = pd.DataFrame.from_dict(data, orient="index").rename(columns={
        "1. open": "open",
        "2. high": "high",
        "3. low": "low",
        "4. close": "close",
        "5. volume": "volume"
    })
    df.index = pd.to_datetime(df.index)
    for col in ["open", "high", "low", "close", "volume"]:
        if col not in df.columns: df[col] = np.nan
    df = df[["open", "high", "low", "close", "volume"]].astype(float).sort_index()
    return df

@st.cache_data(show_spinner="Fetching Oil data...", ttl=3600)
def fetch_oil():
    url = "https://www.alphavantage.co/query"
    params = dict(function="WTI", interval="monthly", apikey=AV_API_KEY)
    r = requests.get(url, params=params)
    data = r.json().get("data", [])
    if not data:
        return pd.DataFrame()
    df = pd.DataFrame(data)
    if "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"])
        df = df.set_index("date")
    if "value" in df.columns:
        df = df.rename(columns={"value": "close"})
    df = df[["close"]].astype(float).sort_index()
    return df

@st.cache_data(show_spinner="Fetching macro data...", ttl=3600)
def fetch_macro(function, **kwargs):
    url = "https://www.alphavantage.co/query"
    params = dict(function=function, apikey=AV_API_KEY)
    params.update(kwargs)
    r = requests.get(url, params=params)
    data = r.json().get("data", [])
    if not data:
        return pd.DataFrame()
    df = pd.DataFrame(data)
    if "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"])
        df = df.set_index("date")
    if "value" in df.columns:
        df = df.rename(columns={"value": function})
    df = df[[function]].astype(float).sort_index()
    return df

# ========== LOAD DATA ==========
if not AV_API_KEY:
    st.warning("Please enter your Alpha Vantage API key above to continue.")
    st.stop()

with st.spinner("Loading asset data..."):
    data = {}
    for asset, meta in ASSETS.items():
        if meta["type"] == "stock":
            df = fetch_stock_daily(meta["symbol"])
        elif meta["type"] == "commodity":
            df = fetch_oil()
        else:
            df = pd.DataFrame()
        data[asset] = df

    macros = {}
    for mname, mmeta in MACROS.items():
        if mname == "10Y Treasury":
            df = fetch_macro(mmeta["function"], interval=mmeta["interval"], maturity=mmeta["maturity"])
        else:
            df = fetch_macro(mmeta["function"])
        macros[mname] = df

# ========== DATA PREP ==========
# Resample all assets to monthly close
def resample_monthly(df):
    if df.empty: return df
    if "close" in df.columns:
        return df["close"].resample("M").last().to_frame(name="close")
    return df

monthly = {k: resample_monthly(v) for k,v in data.items()}
monthly_macros = {}
for k,v in macros.items():
    if not v.empty:
        monthly_macros[k] = v.resample("M").last()

# Merge into panel
panel = pd.DataFrame(index=monthly["S&P 500"].index)
for k, v in monthly.items():
    if not v.empty:
        panel[f"{k}_close"] = v["close"]
for k, v in monthly_macros.items():
    if not v.empty:
        panel[k] = v.iloc[:,0]
panel = panel.sort_index().dropna(how="all")

# ========== KPI & ALERT LOGIC ==========
def rolling_stat(s, window, func):
    return s.rolling(window=window, min_periods=window).apply(func)

def calc_kpis(df, name):
    out = {}
    s = df[f"{name}_close"].dropna()
    if len(s) < 13: return out
    out["Return_1M"] = (s.iloc[-1] / s.iloc[-2] - 1) * 100
    out["Return_3M"] = (s.iloc[-1] / s.iloc[-4] - 1) * 100
    out["Return_12M"] = (s.iloc[-1] / s.iloc[-13] - 1) * 100
    out["Max_Drawdown"] = ((s.cummax() - s) / s.cummax()).max() * 100
    out["Vol_12M"] = s.pct_change().rolling(12).std().iloc[-1] * np.sqrt(12) * 100
    return out

kpis = {k: calc_kpis(panel, k) for k in ASSETS.keys()}

# ALERT thresholds - user can edit
st.sidebar.header("Alert Thresholds")
alert_settings = {
    "drawdown": st.sidebar.slider("Max Drawdown Alert (%)", min_value=5, max_value=50, value=15),
    "volatility": st.sidebar.slider("Volatility Alert (annual %, 12M)", min_value=10, max_value=60, value=30),
    "cpi": st.sidebar.slider("CPI Alert (%)", min_value=2, max_value=10, value=4),
    "unemp": st.sidebar.slider("Unemployment Alert (%)", min_value=3, max_value=15, value=8),
    "treasury": st.sidebar.slider("10Y Treasury Alert (%)", min_value=1, max_value=10, value=5)
}

# ========== ALERT ENGINE ==========
alerts = []
for asset in ASSETS.keys():
    if kpis[asset]:
        if kpis[asset]["Max_Drawdown"] > alert_settings["drawdown"]:
            alerts.append({
                "Date": panel.index[-1].strftime("%Y-%m-%d"),
                "Type": "Drawdown",
                "Asset": asset,
                "Value": f"{kpis[asset]['Max_Drawdown']:.1f}%",
                "Threshold": f"{alert_settings['drawdown']}%",
                "Action": "Review portfolio/risk allocation"
            })
        if kpis[asset]["Vol_12M"] > alert_settings["volatility"]:
            alerts.append({
                "Date": panel.index[-1].strftime("%Y-%m-%d"),
                "Type": "Volatility",
                "Asset": asset,
                "Value": f"{kpis[asset]['Vol_12M']:.1f}%",
                "Threshold": f"{alert_settings['volatility']}%",
                "Action": "Increase monitoring/review hedges"
            })

# Macro alerts
if not panel.empty:
    last = panel.iloc[-1]
    if "CPI" in last and last["CPI"] > alert_settings["cpi"]:
        alerts.append({
            "Date": panel.index[-1].strftime("%Y-%m-%d"),
            "Type": "Macro",
            "Asset": "CPI",
            "Value": f"{last['CPI']:.2f}%",
            "Threshold": f"{alert_settings['cpi']}%",
            "Action": "Review inflation hedges/operations"
        })
    if "Unemployment" in last and last["Unemployment"] > alert_settings["unemp"]:
        alerts.append({
            "Date": panel.index[-1].strftime("%Y-%m-%d"),
            "Type": "Macro",
            "Asset": "Unemployment",
            "Value": f"{last['Unemployment']:.2f}%",
            "Threshold": f"{alert_settings['unemp']}%",
            "Action": "Review labor strategy"
        })
    if "10Y Treasury" in last and last["10Y Treasury"] > alert_settings["treasury"]:
        alerts.append({
            "Date": panel.index[-1].strftime("%Y-%m-%d"),
            "Type": "Macro",
            "Asset": "10Y Treasury",
            "Value": f"{last['10Y Treasury']:.2f}%",
            "Threshold": f"{alert_settings['treasury']}%",
            "Action": "Review financing/borrowing plans"
        })

# ========== DASHBOARD PANELS ==========

# KPIs
st.header("Key Performance Indicators (KPIs)")
kpi_cols = st.columns(len(ASSETS))
for idx, (asset, vals) in enumerate(kpis.items()):
    with kpi_cols[idx]:
        st.subheader(asset)
        for name, val in vals.items():
            st.metric(name.replace("_", " "), f"{val:.2f}")

# Macro KPIs
st.header("Macro Indicators")
macro_cols = st.columns(len(monthly_macros))
for idx, (macro, df) in enumerate(monthly_macros.items()):
    latest = df.iloc[-1,0] if not df.empty else np.nan
    with macro_cols[idx]:
        st.subheader(macro)
        st.metric("Latest", f"{latest:.2f}")

# Alerts
st.header("ðŸ”” Compliance & Anomaly Alerts")
if alerts:
    st.dataframe(pd.DataFrame(alerts))
else:
    st.success("No alerts triggered for current period.")

# Executive Summary
st.header("Executive Summary")
summary = []
if alerts:
    summary.append(f"ALERTS ({len(alerts)}):")
    for a in alerts:
        summary.append(f"- {a['Date']} | {a['Asset']} | {a['Type']} at {a['Value']} (Threshold: {a['Threshold']}): {a['Action']}")
else:
    summary.append("âœ… All KPIs and macro indicators within compliance thresholds. No action needed.")

st.write("\n".join(summary))

# Audit log (last 12 months of drawdown/vol)
st.header("Audit Log (Recent KPI Trends)")
for asset in ASSETS.keys():
    s = panel[f"{asset}_close"].dropna()
    if len(s) >= 13:
        drawdown = ((s.cummax() - s) / s.cummax()) * 100
        vol = s.pct_change().rolling(12).std() * np.sqrt(12) * 100
        st.subheader(f"{asset} Drawdown & Volatility")
        st.line_chart(pd.DataFrame({"Drawdown (%)": drawdown, "Volatility (Ann. %)": vol}))

# ========== END DASHBOARD ==========
st.caption("Built by Michael E Williams | Automated KPI & Compliance Monitor | Powered by Alpha Vantage Free API")

